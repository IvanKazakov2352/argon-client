//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

///<reference path="../Guid.d.ts"/>
///<reference path="../Either.d.ts"/>
///<reference path="../Maybe.ts"/>
///<reference path="IUser.d.ts"/>
///<reference path="IServerDto.d.ts"/>
///<reference path="AuthorizationError.d.ts"/>
///<reference path="IUserCredentialsInput.d.ts"/>
///<reference path="IRegistrationErrorData.d.ts"/>
///<reference path="INewUserCredentialsInput.d.ts"/>
///<reference path="IUserResetPassInput.d.ts"/>
///<reference path="IServer.d.ts"/>
///<reference path="AcceptInviteError.d.ts"/>
///<reference path="InviteCode.d.ts"/>
///<reference path="IUserActivityPresence.d.ts"/>
///<reference path="IUserSocialIntegrationDto.d.ts"/>

interface IUserInteraction
{
	GetMe() : Promise<IUser>;
	CreateServer(request: any) : Promise<IServerDto>;
	GetServers() : Promise<IServerDto[]>;
	Authorize(input: IUserCredentialsInput) : Promise<Either<string, AuthorizationError>>;
	Registration(input: INewUserCredentialsInput) : Promise<Either<string, IRegistrationErrorData>>;
	BeginResetPassword(email: string) : Promise<boolean>;
	ResetPassword(input: IUserResetPassInput) : Promise<Either<string, AuthorizationError>>;
	JoinToServerAsync(inviteCode: InviteCode) : Promise<Either<IServer, AcceptInviteError>>;
	BroadcastPresenceAsync(presence: IUserActivityPresence) : Promise<void>;
	RemoveBroadcastPresenceAsync() : Promise<void>;
	CompleteSocialBoundAsync(token: string, socialUser: string, kind: string, userSlash: string) : Promise<boolean>;
	CreateSocialBoundAsync(kind: string) : Promise<string>;
	GetMeSocials() : Promise<IUserSocialIntegrationDto[]>;
	DeleteSocialBound(kind: string, socialId: Guid) : Promise<boolean>;
}
